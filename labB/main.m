close all;
clear;
clc;

train_res = "./labB_resources/mnist_training/";
test_res = "./labB_resources/mnist_testing/";

%% Load the data
% for training
train_img = readMNIST(strcat(train_res, "train-images.idx3-ubyte"));
train_lbl = readMNIST(strcat(train_res, "train-labels.idx1-ubyte"));
% for testing
test_img = readMNIST(strcat(test_res, "t10k-images.idx3-ubyte"));
test_lbl = readMNIST(strcat(test_res, "t10k-labels.idx1-ubyte"));

num_of_train_samples = length(train_img);
num_of_test_samples = length(test_img);
img_dim = size(train_img);
img_dim = img_dim(1:2);

b = 300; % mini batch size
% Validation frequency is the number of iterations required to validate the
% neural network. An iteration is completed at the end of a pass of a mini
% batch.
valid_freq = round(length(train_img)/b);

%% Train the neural network
% Auto-generated by MATLAB on 31-Jul-2022 10:11:35
% Using Deep Network Designer
layers = [
    imageInputLayer([28 28 1],"Name","imageinput")
    convolution2dLayer([3 3],6,"Name","conv_1")
    reluLayer("Name","relu_1")
    averagePooling2dLayer([2 2],"Name","avgpool2d_1","Stride",[2 2])
    convolution2dLayer([3 3],16,"Name","conv_2")
    reluLayer("Name","relu_2")
    averagePooling2dLayer([2 2],"Name","avgpool2d_2","Stride",[2 2])
    fullyConnectedLayer(120,"Name","fc_1")
    reluLayer("Name","relu_3")
    fullyConnectedLayer(84,"Name","fc_2")
    reluLayer("Name","relu_4")
    fullyConnectedLayer(10,"Name","fc_3")
    softmaxLayer("Name","softmax")
    classificationLayer("Name","classoutput")];

% Canonicalize the arrays so they may be used in trainingOpnions() and
% trainNetwork()
train_img = reshape(train_img,[img_dim, 1, num_of_train_samples]);
test_img = reshape(test_img,[img_dim, 1, num_of_test_samples]);
train_lbl = categorical(train_lbl');
test_lbl = categorical(test_lbl');

% Configure the options for the network
options = trainingOptions("sgdm", ...
    "LearnRateSchedule", "piecewise", ...
    "LearnRateDropFactor", 0.37, ...
    "LearnRateDropPeriod", 2, ...
    "MaxEpochs", 20, ...
    "MiniBatchSize", b, ...
    "ValidationData", {test_img, test_lbl}, ...
    "ValidationFrequency", valid_freq, ...
    "ExecutionEnvironment", "parallel", ...
    "Plots", "training-progress");

CNN = trainNetwork(train_img, train_lbl, layers, options);
